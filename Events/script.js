$(document).ready(function(){

	//в данном примере рассмотрим только такие события. Их намного больше. .resize(), .blur() и т.д.

	// .click()		//клик
	// .dblclick()		//двойной клик
	// .mouseenter()		//наведение мыши
	// .mouseleave()		//убиранием мыши с элементта
	// .focus()		//элемент в фокусе, к примеру, в инпут поставили курсор или табом переключили по элементу
	// .change()		//изменение инпута, к примеру, ввод
	// .keyup()		//отпускание клавиши клавиатуры

	$('#button-1').click(function(){		//обработчик события щелчка мышью. Передаём функцию в аргумент метода
		$('#top-header').toggleClass('pinkColor')		//добавляет\убирает класс. Переключатель
	})		


	//***Клик мышью по элементу

	// $('$button-1').on('click', function(){...})		//можно и таким образом передавать события. .on - начало события, 'click' - само событие. Данный способ работает быстрее и меньше загружает память. И, ГЛАВНОЕ, работает с документами, добавленными ПОСЛЕ прогрузки документа. Т.е., к примеру, через аякс добавили какой-то элемент и мы сможем с ним работать! Более универсальный метод. Данный метод лучше, чем $('#button-1').click(function(){})


	//*** Двойной клик

	// $('#button-1').on('dblclick', function(){		//обработчик двойного щелчка мышью
	// 	$('#top-header').toggleClass('pinkColor');
	// })


	//***Наведение\убирание курсора мыши

	$('#testArea').on('mouseenter', function(){		//отлавливает событие наведения курсора мыши
		$('#testArea').toggleClass('orangeBg')		//можно addClass - добавить класс
	});

	$('#testArea').on('mouseleave', function(){		//отлавливает событие убирания курсора мыши с элемента
		// $('#testArea').toggleClass('orangeBg')		//можно addClass - добавить класс
		//чтобы не выбирать заново селектор $('#testArea'), можно написать $(this). Браузер не ищет заново селектор, а просто работает с тем селектором, который мы выбрали раньше.

		$(this).toggleClass('orangeBg')
	})


	//***Фокус элемента
	// $('#inputName').on('focus', function(){		//когда элемент в фокусе
	// 	$(this).addClass('focus')		//или .toggleClass()
	// })

	// $('#inputName').on('blur', function(){		//когда элемент НЕ в фокусе
	// 	$(this).removeClass('focus')		//или .toggleClass()
	// })



	//***Изменение элемента и выход из элемента

	// $('#inputName').on('change', function(){		//срабатывает при изменении элемента и ВЫХОДЕ из него!
	// 	alert('hello')
	// })

	// $('#inputName').on('change', function(){
	// 	// let text = this.value;		//сохраняем в переменную вэлью инпута. Можно так сделать
	// 	$('#textHolder').text($(this).val())		//А можно так делать. Метод .val() получает значение из инпута
	// 	//.text(this.val()) - не сработает. Нужно в таком случае использовать $(this).val() или this.value
	// 	//метод .text() добавляет текст. Думаю, что это аналог .textContent() в нативном ДжС
	// })


	//*** Передача значения по нажатию клавиш. При поднятии клавиш. Динамическое обновление

	$('#inputName').on('keyup', function(){
		$('#textHolder').text($(this).val())		//происходит динамическое моментальное добавление вводимого текста из инпута в спан с ИД textHolder 
	})

	// http://jquery.page2page.ru/index.php5/%D0%9A%D0%BE%D0%B4%D1%8B_%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB%D0%BE%D0%B2_%D0%B8_%D0%BA%D0%BB%D0%B0%D0%B2%D0%B8%D1%88 - коды клавиш jQuery

	//К примеру, отлов события нажатия на клавишу Esc
	$(document).on('keyup', function(e){		//отлов события на всём документе
		//Если нажатие на Alt, код клавиши 18
		if(e.which == 18){		//если была нажата клавиша с кодом 18, то алерт
			alert('Alt key was pressed!')
		}
	})

	$('#inputName').on('keyup', function(e){		//отлов события на всё документе
		//Если нажатие на Esc, код клавиши 27
		if(e.which == 27){		//если была нажата клавиша с кодом 27, то алерт
			$('#textHolder').text('')		//если в инпуте при вводе текста мы нажали Esc, то поле спана с ИД textHolder очистится
			$(this).val('')		//и так же очистили вэлью инпута
		}
	})


	


})